@using DestallMaterials.Blazor.Components.Universal.Containers
@using DestallMaterials.Blazor.Services.UI;
@using DestallMaterials.WheelProtection.DataStructures;
@using DestallMaterials.WheelProtection.Extensions.Tasks;

@typeparam TLineModel where TLineModel : class

@inherits DisposableComponent

@inject IScrollSensor scrollSensor
@inject IUiManipulator ui

@{

    RenderFragment body = @<tbody>
        <RenderPiece Show=true ReferenceAction="r => _addedItemsPart = r">
            @for (int i = 0; i < _addedItems.Count; i++)
            {
                var item = _addedItems[i];
                <RenderPiece ReferenceAction="r => item.RenderPiece = r">
                    <tr @oncontextmenu="async () => await OnLineRightClickAsync(item)" @oncontextmenu:preventDefault="true">
                        @Line(item.Model)
                    </tr>
                </RenderPiece>
            }
        </RenderPiece>
        
        @for (int i = 0; i < _loadedItems.Count; i++)
        {
            var item = _loadedItems[i];
            <RenderPiece ReferenceAction="r => item.RenderPiece = r">
                <tr @oncontextmenu="async () => await OnLineRightClickAsync(item)" @oncontextmenu:preventDefault="true">
                    @Line(item.Model)
                </tr>
            </RenderPiece>
        }
    </tbody>;
}

@if (BoundToWindow)
{
    <table class="@ResultantTableClass" style="@TableStyle" id="@_tableId">
        <thead>
            @Head
        </thead>
        @body
    </table>
}
else
{
    <table class="@ResultantTableClass" style="@TableStyle">
        <thead>
            @Head
        </thead>
    </table>
    <div style="@ResultantContainerStyle" id="@_tableId" class="@ResultantContainerClass">
        <table class="@ResultantTableClass" style="@TableStyle">
            <thead style="visibility:hidden !important; display:table-footer-group">
                @Head
            </thead>
            @body
        </table>
    </div>
}

@code {

    [Parameter]
    [EditorRequired]
    public RenderFragment Head { get; set; }

    [Parameter]
    [EditorRequired]
    public RenderFragment<TLineModel> Line { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<int, CancellationToken, Task<IReadOnlyList<TLineModel>>> Source { get; set; }

    [Parameter]
    [EditorRequired]
    public int PortionSize { get; set; }

    [Parameter]
    public string TableClass { get; set; }
    string ResultantTableClass => $"{TableClass} loaded-table";

    [Parameter]
    public string ContainerClass { get; set; }
    string ResultantContainerClass => $"{ContainerClass} loaded-table-container";

    [Parameter]
    public string TableStyle { get; set; }

    [Parameter]
    public string ContainerStyle { get; set; }

    [Parameter]
    public bool BoundToWindow { get; set; } = false;

    [Parameter]
    public double LoadAtScrollRatio { get; set; } = 0.25;

    [Parameter]
    public Func<TLineModel, RenderPiece, Task> OnLineRightClick { get; set; }

    internal void FireLineChanged(TLineModel line, TLineModel newValue)
    {
        var item = _loadedItems.FirstOrDefault(i => _equalityComparer.Equals(i.Model, line));
        if (item is null)
        {
            return;
        }
        if (newValue is null)
        {
            if (_loadedItems.Remove(item))
            {
                StateHasChanged();
            }
            return;
        }
        item.Model = newValue;
        item.RenderPiece.Refresh();
    }

    async Task OnLineRightClickAsync(ModelRenderPiecePair<TLineModel> item)
    {
        var renderPiece = item.RenderPiece;
        await OnLineRightClick(item.Model, renderPiece);
    }

    public void AddInFront(IEnumerable<TLineModel> items)
    {
        _loadedItems.InsertRange(0, items.Select(i => new ModelRenderPiecePair<TLineModel>(i)));
        _addedItemsPart?.Refresh();
    }

    public void Remove(IEnumerable<TLineModel> items)
    {
        _loadedItems.RemoveAll(one => items.Any(i => _equalityComparer.Equals(i, one.Model)));
        StateHasChanged();
    }

    public async Task RefreshAsync(CancellationToken cancellationToken)
    {
        _addedItems.Clear();
        _loadedItems.Clear();
        _reachedEnd = false;
        _loadedPages = 0;
        await LoadAnotherAsync(cancellationToken);
        StateHasChanged();
    }

    string ResultantContainerStyle => $"overflow:hidden; overflow-y: scroll; height: 800px; {ContainerStyle}";

    RenderPiece _loadedItemsPart;
    readonly List<ModelRenderPiecePair<TLineModel>> _loadedItems = new();

    RenderPiece _addedItemsPart;
    readonly List<ModelRenderPiecePair<TLineModel>> _addedItems = new();

    readonly string _tableId = Guid.NewGuid().ToString();

    bool _reachedEnd = false;
    int _loadedPages = 0;

    bool _loading;
    async Task LoadAnotherAsync(CancellationToken cancellationToken)
    {
        if (!_reachedEnd)
        {
            _loading = true;
            var newItems = await Source(++_loadedPages, cancellationToken);
            if (newItems.Any())
            {
                _loadedItems.AddRange(newItems.Select(ni => new ModelRenderPiecePair<TLineModel>(ni)));
                StateHasChanged();
            }
            if (newItems.Count < PortionSize)
            {
                _reachedEnd = true;
            }
            await Task.Delay(100);
            _loading = false;
        }
    }

    protected override Task OnInitializedAsync()
        => base.OnInitializedAsync().Then(async () => await LoadAnotherAsync(UntilDisposed));

    bool? _boundAsWindow;
    IDisposable callback;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (_boundAsWindow == BoundToWindow)
        {
            return;
        }
        callback?.Dispose();
        if (BoundToWindow)
        {
            callback = await scrollSensor.SubscribeForWindowScrollAsync(async scrollState =>
            {
                if (_loading)
                {
                    return;
                }
                var itemRectangle = await ui.GetElementBoungingRectangle(_tableId);
                if ((itemRectangle.Bottom - scrollState.VisibleHeight) / scrollState.VisibleHeight < LoadAtScrollRatio)
                {
                    await LoadAnotherAsync(UntilDisposed);
                }
            });
        }
        else
        {
            callback = await scrollSensor.SubscribeAsync(_tableId, async elementScrollState =>
            {
                if (_loading)
                {
                    return;
                }
                if ((elementScrollState.ScrolledVertically + elementScrollState.VisibleHeight) / (elementScrollState.MaxVerticalScroll) >= (1 - LoadAtScrollRatio))
                {
                    await LoadAnotherAsync(UntilDisposed);
                }
            });

        }

        BindToLifetime(callback);

    }

    static readonly ByReferenceEqualityComparer<TLineModel> _equalityComparer = ByReferenceEqualityComparer<TLineModel>.Instance;

    static readonly Func<TLineModel, TLineModel, bool> LinesAreEqual = typeof(TLineModel) == typeof(string) ?
        (s1, s2) => s1.Equals(s2) : (s1, s2) => LinesAreEqual(s1, s2);
}
