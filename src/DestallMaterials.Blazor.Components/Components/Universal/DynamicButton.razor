@using DestallMaterials.Blazor.Auxiliary;
@using DestallMaterials.Blazor.Components.Universal;
@using DestallMaterials.WheelProtection.Executions;
@using DestallMaterials.WheelProtection.Extensions.Strings;
@using MudBlazor;

@inherits DisposableComponent

@implements IExposedReference<DynamicButton>

@{
    string style = Button.Hidden ? "visibility:hidden" : "";

    style = $"width:50px; {style}; {Style}";
}

<MudBlazor.MudItem Style="@style">

    @if (showPopover)
    {
        <MudPopover AnchorOrigin="@popoverLocation" Open=true TransformOrigin="@transform">
            <span style="padding:15px">
                @popoverContent
            </span>
        </MudPopover>

    }

    @if (Success == true)
    {
        <MudBlazor.MudIconButton Icon="@(MudBlazor.Icons.Material.Filled.Done)" Size="MudBlazor.Size.Medium" Color="MudBlazor.Color.Success" />
    } else if (Success == false)
    {
        <MudBlazor.MudIconButton Icon="@(MudBlazor.Icons.Material.Filled.Close)" Size="MudBlazor.Size.Medium" Color="MudBlazor.Color.Error" />
    } else if (Progress)
    {
        <MudBlazor.MudProgressCircular Size="MudBlazor.Size.Medium" Indeterminate=true />
    } else
    {
        <MudButton ButtonType=MudBlazor.ButtonType.Button
                   Disabled=@Button.Disabled
                   OnClick="() => OnClick(UntilDisposed)"
                   StartIcon="@(Button.Icon)"
                   Size="MudBlazor.Size.Medium"
                   Color="Button.Color"
                   Style="@style"
                   Class="@CssClass">

            @Button.ActionName

        </MudButton>
    }
</MudBlazor.MudItem>

@code {
    [Parameter]
    [EditorRequired]
    public ButtonConfiguration Button { get; set; }

    public Task PressAsync(CancellationToken cancellationToken) => OnClick(cancellationToken);

    [Parameter]
    public Action<DynamicButton> ReferenceAction { get; set; } = db => { };

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public string Style { get; set; }

    string popoverContent;
    bool showPopover => popoverContent.HasContent();
    Origin popoverLocation;
    Origin transform = Origin.TopRight;

    protected override void OnParametersSet()
        => ReferenceAction(this);

    readonly string id = Guid.NewGuid().ToString();

    async Task OnClick(CancellationToken cancellationToken)
    {
        if (Button.Callback is null)
        {
            return;
        }
        Progress = true;
        bool isSuccess = false;
        StateHasChanged();
        try
        {
            await Button.Callback(cancellationToken);
            Success = true;
            StateHasChanged();
            await Task.Delay(StateShowPeriod, cancellationToken);
            isSuccess = true;
        }
        catch (Exception ex)
        {
            if (ex is IExplained explained)
            {
                popoverContent = explained.Explanation;
            }
            Success = false;
            StateHasChanged();
            await Task.Delay(StateShowPeriod);
        }
        finally
        {
            popoverContent = "";
            StateHasChanged();
            Success = null;
            Progress = false;
        }
        if (isSuccess)
        {
            Button.AfterSuccess();
        }
    }

    bool Progress { get; set; }

    bool? Success { get; set; }

    TimeSpan StateShowPeriod => Button.ShowStateFor;
}
