@using DestallMaterials.Blazor.Components.Universal.Inputs;
@using DestallMaterials.Blazor.Components.Universal.Containers;
@using DestallMaterials.WheelProtection.Extensions.Strings;
@using MudBlazor

<div style="display:inline-block">

    @{
        base.BuildRenderTree(__builder);
    }
</div>

<MudExpansionPanel Text="@Label" Style="@Style" Disabled=Disabled>
    <TitleContent>
        @{
            string checkBoxStyle = "display:flex; width: fit-content;";
            if (HideCheckbox)
            {
                checkBoxStyle = $"{checkBoxStyle}; visibility:hidden;";
            }
        }

        <div style="display:flex; align-items:center">

            <MudCheckBox Checked="@Checked" CheckedChanged="checkedChanged" T="bool?" Style="@checkBoxStyle" />
            <span>@Label</span>

        </div>

    </TitleContent>
    <ChildContent>
        @ChildContent
    </ChildContent>
</MudExpansionPanel>


@code {

    [Parameter]
    public bool? Checked { get; set; }

    [Parameter]
    public Action<bool?> OnCheckedChanged { get; set; }

    [Parameter]
    public bool HideCheckbox { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    void checkedChanged(bool? newValue)
    {
        if (OnCheckedChanged is not null)
        {
            OnCheckedChanged(newValue);
        }
        Checked = newValue;
    }
}


