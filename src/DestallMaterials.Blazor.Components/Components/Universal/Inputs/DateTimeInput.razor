@using DestallMaterials.Blazor.Components.Universal.Inputs
@using DestallMaterials.Blazor.Services
@using DestallMaterials.WheelProtection.Extensions.Strings;
@using MudBlazor

@inherits BaseInput<DateTime?>

<MudItem Class="@Class" Style="@containerStyle">
    @{
        const string icon = Icons.Material.Filled.Clear;
        string style = Value is null ? $"visibility: hidden;" : "";
        style = $"{style} margin-top:14%;";
        
        <MudIconButton Icon="@icon" Style="@style" OnClick="() => { Value = MinValue; StateHasChanged(); }" Size="Size.Small" />
    }
    @if (PickDate)
    {
        <MudDatePicker
            PickerVariant="PickerVariant.Inline" 
            Label=@Label @bind-Date="Date" 
            Culture="System.Globalization.CultureInfo.CurrentCulture" 
            Class="d-inline-flex" 
            MinDate="MinValue" 
            Style="width:120px" />
    }
    @if (PickTime)
    {
        <MudTimePicker 
            @bind-Time=Time 
            Culture="System.Globalization.CultureInfo.CurrentCulture" 
            Class="d-inline-flex" 
            Style="width: 100px; margin-left: 10px" />
    }

</MudItem>

@code {

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public bool PickTime { get; set; } = true;

    [Parameter]
    public bool PickDate { get; set; } = true;

    [Parameter]
    public DateTime MinValue { get; set; } = new DateTime(2000, 1, 1);

    /// <summary>
    /// If only date is pickable then the picked Date will denote the last tick of the selected date.
    /// </summary>
    [Parameter]
    public bool PickLastMomentOfDay { get; set; } = true;

    string containerStyle => "display: flex; max-width: 150px;";

    protected override void OnParametersSet()
    {
        if (!PickDate && !PickTime)
        {
            throw new InvalidOperationException("At least one of time or date should be pickable.");
        }

        base.OnParametersSet();
        _value = Value;


    }


    string ValueString => Value == DateTime.MaxValue ? "∞" : Value.ToString();

    TimeSpan? Time
    {
        get => Value.HasValue ? Value.Value.TimeOfDay : default;
        set
        {
            Value = (Date ?? default) + (value ?? default); 
            if (OnValueSet is not null)
            {
                OnValueSet(Value);
            }
        }
    }
    DateTime? Date
    {
        get => Value.HasValue ? Value.Value.Date : default;
        set
        {
            Value = (value ?? default) + (Time ?? default);

            if (Value == default(DateTime))
            {
                Value = default;
            }

            if (!PickTime && PickDate && PickLastMomentOfDay && Value is not null)
            {
                Value = Value.Value.Date.AddDays(1).AddTicks(-1);
            }

            if (OnValueSet is not null)
            {
                OnValueSet(Value);
            }
        }
    }

    public DateTimeInput()
    {
        Value = DateTime.Now;
    }

}