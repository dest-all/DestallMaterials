@using DestallMaterials.Blazor.Components.Universal.Inputs
@using DestallMaterials.Blazor.Services
@using DestallMaterials.WheelProtection.Extensions.Strings;
@using MudBlazor
@using System.Globalization

@inherits BaseInput<DateTime>

<MudItem Class="@Class" Style="@containerStyle">
    @{
        const string icon = Icons.Material.Filled.Clear;
        string style = Date == default ? $"visibility: hidden;" : "";
        style = $"{style} ;";

        <MudIconButton Icon="@icon" Style="@style" OnClick="() => { Value = default; StateHasChanged(); }" Size="Size.Small" />
    }
    @if (PickDate)
    {
        <FlexibleDatePicker Clearable="false"
                            OnValueChanged="d => DateChanged(d)"
                            Value=Date
                            PlaceholderText="Nothing"
                            Culture=Culture
                            Label="@Label" />
    }
    @if (PickTime)
    {
        string timeLabel = Label.IsEmpty() ? "" : " ";
        <MudTimePicker Culture=Culture
                       Class="d-inline-flex"
                       Style="margin-left: 10px;min-width:88px;"
                       Label=@timeLabel
                       TimeChanged="t => TimeChanged(t ?? default)"
                       Time="Time"
                       PickerVariant="PickerVariant.Dialog" />
    }

</MudItem>

@code {

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public bool PickTime { get; set; } = true;

    [Parameter]
    public bool PickDate { get; set; } = true;

    [Parameter]
    public DateTime MinValue { get; set; } = new DateTime(2000, 1, 1);

    [Parameter]
    public CultureInfo Culture { get; set; } = System.Globalization.CultureInfo.CurrentCulture;

    [Parameter]
    public Action<DateOnly?> OnDateChanged { get; set; } = d => { };

    [Parameter]
    public Action<TimeSpan> OnTimeChanged { get; set; } = t => { };

    /// <summary>
    /// If only date is pickable then the picked Date will denote the last tick of the selected date.
    /// </summary>
    [Parameter]
    public bool PickLastMomentOfDay { get; set; } = true;

    [Parameter]
    public string? Error { get; set; }

    string containerStyle => "display: flex; max-width: 250px; min-width: 250px;";

    protected override void OnParametersSet()
    {
        if (!PickDate && !PickTime)
        {
            throw new InvalidOperationException("At least either time or date should be pickable.");
        }

        base.OnParametersSet();
        _value = Value;
    }

    string ValueString => Value > new DateTime(2200, 01, 01) ? "∞" : Value.ToString();

    TimeSpan Time
    {
        get => Value.TimeOfDay;
        set
        {
            Value = (Date).ToDateTime(TimeOnly.FromTimeSpan(value));
            if (OnValueSet is not null)
            {
                OnValueSet(Value);
            }
        }
    }

    DateOnly Date
    {
        get => DateOnly.FromDateTime(Value);
        set
        {
            Value = (value).ToDateTime(TimeOnly.FromTimeSpan(Time));

            if (Value == default(DateTime))
            {
                Value = default;
            }

            if (!PickTime && PickDate && PickLastMomentOfDay && Value != default)
            {
                Value = Value.Date.AddDays(1).AddTicks(-1);
            }

            if (OnValueSet is not null)
            {
                OnValueSet(Value);
            }
        }
    }

    void TimeChanged(TimeSpan time)
    {
        Value = Value.Date.Add(time);
        OnTimeChanged?.Invoke(time);
        OnValueSet?.Invoke(Value);
    }

    void DateChanged(DateOnly date)
    {
        Value = date.ToDateTime(TimeOnly.FromTimeSpan(Value.TimeOfDay));
        OnDateChanged?.Invoke(date);
        OnValueSet?.Invoke(Value);
    }

    public DateTimeInput()
    {
        Value = DateTime.Now;
    }

}