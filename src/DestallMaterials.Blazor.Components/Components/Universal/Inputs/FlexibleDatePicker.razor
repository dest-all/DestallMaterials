@using MudBlazor
@using System.Globalization

<MudDatePicker Label=@Label
               Editable="true"
               Date="Value == default ? null : Value.ToDateTime(default)"
               ImmediateText="true"
               Placeholder=@ValueNotSetText
               DateFormat="@_dateFormat"
               TextChanged="DatePickerTextChanged"
               Clearable=Clearable
               DateChanged="d => OnValueChanged(DateOnly.FromDateTime(d ?? default))"
               Culture=Culture
               PickerVariant="PickerVariant.Dialog"
               Class="flexible-date-picker"
               HelperText=" "
               ErrorText=@IncorrectDateText />

@code {
    private string _dateFormat = "dd.MM.yyyy";
    
    static readonly string[] _shortFormats = ["ddMM", "dd.MM", "dd", "d"];
    static readonly string[] _formats = ["ddMMyy", "dd.MM.yyyy", "dd.M.yyyy", "d.MM.yyyy", "d.M.yyyy", "dd.MM.yy", "dd.M.yy", "d.MM.yy", "d.M.yy"];

    [Parameter]
    public Action<DateOnly> OnValueChanged { get; set; } = (newDate) => { };

    [Parameter]
    public string PlaceholderText { get; set; }

    [Parameter]
    public DateOnly Value { get; set; }

    [Parameter]
    public CultureInfo Culture { get; set; } = CultureInfo.CurrentCulture;

    [Parameter]
    public bool Clearable { get; set; }

    [Parameter]
    public string Label { get;set; }

    [Parameter]
    public string ValueNotSetText { get; set; } = "Not set";

    [Parameter]
    public string IncorrectDateText { get; set; } = "Invalid date";

    void DatePickerTextChanged(string value)
    {
        DateOnly newValue = default;
        if (value == null || value.Length < 6 && !value.EndsWith(" "))
        {
        }
        else
        {
            if (DateTime.TryParseExact(value, _formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime validDate))
            {
                newValue = DateOnly.FromDateTime(validDate);
            }
            else if (DateTime.TryParseExact(value, _shortFormats, CultureInfo.InvariantCulture, DateTimeStyles.None, out validDate))
            {
                var now = DateTime.Now;
                newValue = DateOnly.FromDateTime(validDate);
                newValue = DateOnly.FromDateTime(validDate).AddMonths(now.Month - validDate.Month);
            }
        }
        var valueChanged = newValue != Value;
        Value = newValue;
                
        if (valueChanged)
        {
            OnValueChanged(newValue);
        }
    }
}