@using DestallMaterials.WheelProtection.Extensions.Strings
@using MudBlazor
@typeparam TItem

<div class="@cssClass">
    <MudAutocomplete T="TItem"
                     Label=@Label
                     SearchFunc="async (string filterString, CancellationToken cancellationToken) => await GetItemsByFilter(filterString, default)"
                     ResetValueOnEmptyText="true"
                     ToStringFunc="GetItemRepresentation"
                     MaxItems="50"
                     ValueChanged="async v => await OnValueChanged(v)"
                     @ref=_autocomplete
                     Disabled=Disabled
                     ErrorText=@GeneralError
                     Error="@GeneralError.HasContent()" />


    @{
        int i = 0;
    }
    @foreach (var selectedItem in _value ?? [])
    {
        var error = ItemErrors.FirstOrDefault(e => e.Item1 == i).Item2;
        i++;
        <MudChip T=string OnClose="() => RemoveItem(selectedItem)">
            @(GetItemRepresentation(selectedItem))
            @if (error is not null)
            {
                <span class="errored">(@(error))</span>
            }
        </MudChip>
    }
</div>


@code {
    [Parameter]
    [EditorRequired]
    public Func<string, CancellationToken, Task<IEnumerable<TItem>>> GetItemsByFilter { get; set; }

    [Parameter]
    public Func<TItem, string> GetItemRepresentation { get; set; } = item => item?.ToString();

    [Parameter]
    public int MaxItemsShown { get; set; }

    [Parameter]
    public IEnumerable<TItem> Value { get; set; }

    [Parameter]
    public Action<TItem[]> OnValueSet { get; set; } = i => { };

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public Func<TItem, bool> ItemIsEmpty { get; set; } = item => item == null;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public IReadOnlyList<(int, string)> ItemErrors { get; set; } = [];

    [Parameter]
    public string GeneralError { get; set; } = "";

    string cssClass => $"search-selector-plural {Class}";

    TItem _currentItemInAutocomplete;

    List<TItem> _value;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _value = Value?.ToList() ?? [];
    }

    MudAutocomplete<TItem> _autocomplete;

    void FireValueChanged()
    {
        OnValueSet(_value.ToArray());
    }

    void RemoveItem(TItem item)
    {
        _value.Remove(item);
        FireValueChanged();
        StateHasChanged();
    }

    async Task OnValueChanged(TItem value)
    {
        if (_autocomplete is not null)
        {
            await _autocomplete.CloseMenuAsync();
            await _autocomplete.ClearAsync();
            await Task.Delay(10);
        }

        if (!ItemIsEmpty(value))
        {
            _value.Add(value);
            FireValueChanged();

        }
    }
}
