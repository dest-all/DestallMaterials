@using Microsoft.AspNetCore.Components.Web
@typeparam TValue

@inherits DisposableComponent

@code {
    [Parameter]
    public Func<TValue, Task> OnValueSetAsync { get; set; } = s => Task.CompletedTask;

    [Parameter]
    public Action<TValue> OnValueSet { get; set; } = s => { };

    [Parameter]
    public Action<TValue> OnValueGet { get; set; } = s => { };

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public TValue Value { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Action OnBlur { get; set; } = () => { };

    [Parameter]
    public Func<CancellationToken, Task> OnMouseIn { get; set; } = (ct) => Task.CompletedTask;

    [Parameter]
    public Func<CancellationToken, Task> OnMouseOut { get; set; } = (ct) => Task.CompletedTask;

    [Parameter]
    public Func<CancellationToken, Task> OnClickOutside { get; set; } = (ct) => Task.CompletedTask;

    [Parameter]
    public bool Disabled { get; set; }

    protected TValue _value;

    protected virtual async Task OnInput(TValue value)
    {
        Value = value;
        Task onValueSetTask = null;
        if (OnValueSetAsync != null)
        {
            onValueSetTask = OnValueSetAsync(value);
        }
        if (OnValueSet != null)
        {
            OnValueSet(value);
        }
        if (onValueSetTask != null)
        {
            await onValueSetTask;
        }
    }

    protected async Task OnOuterClickAsync(MouseEventArgs mouseEventArgs)
    {
        //await base.OnOuterClickAsync(mouseEventArgs);
        if (OnClickOutside != null)
        {
            await OnClickOutside(UntilDisposed);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _value = Value;
    }
}
