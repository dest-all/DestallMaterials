@page "/"

@using DestallMaterials.Blazor.Components.Universal.Filters;
@using DestallMaterials.Blazor.Components.Universal.Inputs
@using DestallMaterials.WheelProtection.Extensions.String

<h1>sdfdsfdsf</h1>
<h1>sdfdsfdsf</h1>
<h1>sdfdsfdsf</h1>
<h1>sdfdsfdsf</h1>
<h1>sdfdsfdsf</h1>
<h1>sdfdsfdsf</h1>
<h1>sdfdsfdsf</h1>
<h1>sdfdsfdsf</h1>
<h1>sdfdsfdsf</h1>
<h1>sdfdsfdsf</h1>

<SearchSelectorSingular 
    TItem="string"
    GetItemRepresentation="i => i"
    GetItemsCount="async filter => Items.Count(i => filter.IsEmpty() || i.ToLower().Contains(filter.ToLower()))"
    GetPage="async (filter, page) => GetActualItems(page, filter)"
    ItemsAreEqual="(i1, i2) => i1 == i2"
    MaxItemsShown="10"
    />

<h1>sdfdsfdsf</h1>

@code {
    private string inp = "basic";
    const int _batchSize = 10;
    readonly string[] Items = CreateItems();

    List<string> GetActualItems(int page, string filter) => Items
        .Where(i => filter.IsEmpty() || i.ToLower().Contains(filter.ToLower()))
        .Skip(_batchSize * (int)(page - 1))
        .Take(_batchSize)
        .ToList();

    static string[] CreateItems()
    {
        var nameGen = new NameGenerator.Generators.RealNameGenerator();
        var result = Enumerable.Range(0, 100).Select(i => nameGen.Generate()).OrderBy(s => s).ToArray();
        return result;
    }
}