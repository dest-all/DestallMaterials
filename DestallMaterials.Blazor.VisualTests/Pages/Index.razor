@page "/"

@using DestallMaterials.Blazor.Components.Universal.Filters;
@using DestallMaterials.Blazor.Components.Universal.Inputs
@using DestallMaterials.WheelProtection.Extensions.String

<StringInput OnValueSetAsync="async v => { Filter = v; await RerenderSelectionListAsync(); StateHasChanged(); }" />

@if (ListShown)
{
    <SelectionList TItem="string"
               ItemsCountTotal="Task.FromResult(Items.Count(i => Filter.IsEmpty() || i.ToLower().Contains(Filter.ToLower())))"
               GetBatch="async page => GetActualItems(page)"
               OnItemClicked="item => Console.WriteLine(item.ToString())"
               MaxItemsShown="10"
               IsActive=true 
               @ref=SelectionList
               />
}

@code {
    private string inp = "basic";
    const int _batchSize = 10;
    readonly string[] Items = CreateItems();

    bool ListShown = true;

    string Filter { get; set; }

    List<string> GetActualItems(uint page) => Items.Where(i => Filter.IsEmpty() || i.ToLower().Contains(Filter.ToLower())).Skip(_batchSize * (int)(page - 1)).Take(_batchSize).ToList();

    SelectionList<string> SelectionList;

    static string[] CreateItems()
    {
        var nameGen = new NameGenerator.Generators.RealNameGenerator();

        var result = Enumerable.Range(0, 100).Select(i => nameGen.Generate()).OrderBy(s => s).ToArray();

        return result;
    }

    async Task RerenderSelectionListAsync()
    {
        ListShown = false;
        await Task.Delay(10);
        StateHasChanged();
        ListShown = true;
        StateHasChanged();
    }
}