@typeparam TItem

<div>
    <span class="material-icons" style="display: inline">chevron_right</span>
    <StringInput OnValueSetAsync="async v => { Filter = v; await RerenderSelectionListAsync(); StateHasChanged(); }"
                 OnClickOutside="async () => await OnClickOutside()"
                 OnFocus="() => { ListShown = true; StateHasChanged(); }"
                 Value=@_inputValue
                 OnBlur="async () => await OnBlur()">
        @if (ListShown)
        {
            <SelectionList TItem="TItem"
                       ItemsCountTotal="GetItemsCount(Filter)"
                       GetBatch="async page => await GetPage(Filter, page)"
                       OnItemClicked="OnItemPressed"
                       MaxItemsShown=MaxItemsShown
                       IsActive=true
                       @ref=SelectionList />
        }
    </StringInput>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public Func<string, int, Task<IList<TItem>>> GetPage { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<string, Task<int>> GetItemsCount { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<TItem, string> GetItemRepresentation { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<TItem, TItem, bool> ItemsAreEqual { get; set; }

    [Parameter]
    public int MaxItemsShown { get; set; }

    [Parameter]
    public TItem Value { get; set; }

    public string _inputValue;

    async Task RerenderSelectionListAsync()
    {
        ListShown = false;
        StateHasChanged();
        await Task.Delay(5);
        ListShown = true;
        StateHasChanged();
    }

    bool ListShown = false;

    string Filter;

    SelectionList<TItem> SelectionList;

    async Task OnClickOutside()
    {
        ListShown = false;
        StateHasChanged();
    }

    async Task OnBlur()
    {
        await Task.Delay(100);
        await OnClickOutside();
    }

    void OnItemPressed(TItem item)
    {
        Value = item;
        ListShown = false;
        _inputValue = GetItemRepresentation(item);
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _inputValue = GetItemRepresentation(Value);
        }
    }
}
