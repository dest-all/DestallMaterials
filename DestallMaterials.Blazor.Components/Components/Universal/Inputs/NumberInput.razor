@using DestallMaterials.WheelProtection.Extensions.Object;
@using DestallMaterials.WheelProtection.Extensions;

@typeparam T
@inherits BaseInput<T>

@if (IsFraction)
{
    <MudBlazor.MudNumericField Format=Format T="T" ValueChanged="v => OnValueSet(v)" Value="_value" HideSpinButtons Label="@Label" />
}
else if (IsWholeNumber)
{
    <MudBlazor.MudNumericField T="T" ValueChanged="v => OnValueSet(v)" Value=_value HideSpinButtons Label="@Label" />
}
else
{
    throw new InvalidOperationException($"Invalid number type {typeof(T).FullName}.");
}

@code {
    [Parameter]
    public byte Accuracy { get; set; } = 2;

    string Format => $"F{Accuracy}";

    static readonly IEnumerable<Type> WholeNumbers = new Type[]
    {
        typeof(byte), typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(short), typeof(ushort),
        typeof(byte?), typeof(int?), typeof(uint?), typeof(long?), typeof(ulong?), typeof(short?), typeof(ushort?)
    };

    static readonly IEnumerable<Type> FractionalNumbers = new Type[]
    {
        typeof(float), typeof(double), typeof(decimal),
        typeof(float?), typeof(double?), typeof(decimal?)
    };

    static readonly bool IsFraction = typeof(T).IsOneOf(FractionalNumbers);
    static readonly bool IsWholeNumber = typeof(T).IsOneOf(WholeNumbers);

}