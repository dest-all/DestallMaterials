@using DestallMaterials.Blazor.Functions
@using DestallMaterials.Blazor.Services.Extensions
@using DestallMaterials.Blazor.Services.UI
@using DestallMaterials.Blazor.Services.UI.Extensions
@using DestallMaterials.WheelProtection.Extensions.String

@inherits ClickableComponent

@inject IJSRuntime js;

@typeparam TItem

<input @ref=_distracter id="list-distracter"/>
<ul class="selection-list"
    id=@_elementId
    style=@ListStyle
    @ref=_listReference
    @onfocus=_onFocus
    @onclick="async () => await _distracter.FocusAsync()"
    @onscroll="async () => await OnScroll()"
    >
    @{
        int i = 0;
        bool added = false;
        VirtualizerNumbers numbers = default;
    }
    <Virtualize ItemsProvider="async r => await ProvideItems(r)" TItem="TItem" Context="item" @ref=Virtualize>
        @{
            if (VirtualizerController == null && Virtualize != null)
            {
                VirtualizerController = new VirtualizerController<TItem>(
                    uiManipulator,
                    Virtualize,
                    _elementId,
                    () => ItemsCountTotal,
                    (int)Math.Min(MaxItemsShown, ItemsCountTotal),
                    _listLineHeight
                );
            }

            if (VirtualizerController != null && !added)
            {
                numbers = VirtualizerController.Numbers;
                i += numbers.ItemsBefore;
                added = true;
            }

            var selectedItemBoundaries = SelectedItemBoundaries;

            bool selected = SelectedItemIndex == i;
            string representation = GetItemRepresentation(item);
            string cssClass = selected ? "selected" : "";
            string id = $"{_elementId}_{i}";

            var indexContainer = new { i };

            var onClick = async () =>
            {
                await ClickItem(item);
                SelectedItemIndex = indexContainer.i;
            };

            i++;
            bool isLast = numbers.ItemsCount == i - numbers.ItemsBefore;
            if (isLast)
            {
                i = 0;
                added = false;
            }
        }
        <li class=@cssClass @onclick=onClick id=@id>
            @representation
        </li>
    </Virtualize>
</ul>

@code {
    ElementReference _distracter;

    async Task OnScroll() 
    {
        if (VirtualizerController == null)
        {
            return;
        }
        TopBottomIndexes = await VirtualizerController.GetTopAndBottomIndexesAsync();
    }

    TopBottomIndexPair SelectedItemBoundaries;
}