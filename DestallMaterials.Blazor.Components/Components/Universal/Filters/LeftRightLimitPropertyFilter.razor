@using Common.AdvancedDataStructures;
@using Client.Web.View.Components.Universal.Inputs;

@inherits ViewComponent

@typeparam TValue where TValue : IComparable<TValue>
@typeparam TReturn


@code {

    [Parameter]
    public Action<FilterWithFlag<LeftRightValuePair<TValue>, LeftRightValuePair<bool>>, TReturn> OnFilterChange { get; set; } = (v, s) => { };

    [Parameter]
    public LeftRightValuePair<bool> Filters { get; set; } = new();
    
    [Parameter]
    public Action<TValue> OnValueSet { get; set; } = s => { };

    [Parameter]
    public Action<TValue> OnValueGet { get; set; } = s => { };

    [Parameter]
    public string InputLabel { get; set; }

    [Parameter]
    public LeftRightValuePair<TValue> Value { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    protected virtual TReturn GetResult()
    {
        throw new NotImplementedException();
    }

    protected readonly LeftRightValuePair<bool> LimitErrored = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Value = Value ?? new();
        Filters = Filters ?? new();
    }

    protected FilterWithFlag<LeftRightValuePair<TValue>, LeftRightValuePair<bool>> ValueWithFlag => new()
        {
            Filters = Filters,
            Value = Value
        };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            OnFilterChange(ValueWithFlag, GetResult());
        }
    }

}