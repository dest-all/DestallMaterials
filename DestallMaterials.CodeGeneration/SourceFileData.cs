using CodeGenerationRail.Files;
using DestallMaterials.CodeGeneration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace CodeGenerationRail.Models
{
    public class SourceFileData
    {
        const string commentLine = "Autogenerated. Will be overwritten on build. Remove this comment to cancel overwriting.";
        private static Dictionary<string, string> Extension_LineCommentPattern;

        private string GetCommentString(string comment)
        {
            var res = string.Format(Extension_LineCommentPattern[this.FilePath.Extension], comment);
            return res;
        }

        public static void LoadLineCommentPatterns(Dictionary<string, string> patterns)
        {
            Extension_LineCommentPattern = patterns.ToDictionary(p => p.Key, p => p.Value);
        }

        public FilePath FilePath;
        public string Content;
        public string Source;

        public bool Exists()
        {
            return File.Exists(this.FilePath.ToString());
        }

        public string Read()
        {
            if (!Exists()) { return null; }
            var res = File.ReadAllText(this.FilePath.ToString());
            return res;
        }

        public bool OverwriteProtected()
        {
            if (!Exists()) { return false; }
            if (!Extension_LineCommentPattern.ContainsKey(this.FilePath.Extension))
            {
                return false;
            }

            var commentedString = GetCommentString(commentLine);

            return !Read().Contains(commentedString);
        }

        public void AddAutogeneratedComment()
        {
            if (!Extension_LineCommentPattern.ContainsKey(this.FilePath.Extension)) { return; }
            var commentedString = GetCommentString(commentLine);
            this.Content = $"{commentedString}\n\n{Content}";
        }
    }
}
